pipeline { 
    agent any
    stages {
        stage('BUILD_and_DEPLOY') {
             steps { 
                  script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'DockerSSHkey', keyFileVariable: 'KeyFile', usernameVariable: 'userName')]) {
                    def remote = [:]
                    remote.allowAnyHosts = 'true'
                    remote.name = 'ubuntu'
                    remote.host = '192.168.0.190'
                    remote.user = userName
                    remote.identityFile  = KeyFile
                 //   remote.password = 'qwerwqeqweqwe!'
                    sshCommand remote: remote, failOnError: false, command: 'var="apt-cache policy docker | grep Installed" && if [ -n "$var" ]; then echo "installed"; else echo "not installed"; fi'
                    sshCommand remote: remote, failOnError: false, command: 'var="docker ps | grep nginx_test" && if [ -n "$var" ]; then echo "Running" && docker stop nginx_test && docker rm nginx_test; else echo " Stopped"; fi'
                    sshPut remote: remote, from: 'Dockerfile', into: '/root/docker/'
                    //sshPut remote: remote, from: "${WORKSPACE}" , filterRegex: /.html$/, into: '/root/docker/WebSite'
                    sshPut remote: remote, from: "${WORKSPACE}/Website" , into: '/root/docker'
                    sshCommand remote: remote, command: 'docker build /root/docker/. -t test1000'
                    sshCommand remote: remote, command: 'docker run --rm -d -p 80:80 -u root --name nginx_test -v /root/docker/Website/:/var/www/html:ro test1000'
                    sshCommand remote: remote, command: 'docker ps'
               //     sshCommand remote: remote, command: 'curl localhost:80'
                    }
             }
         }
        } 
        stage('TEST') {
            steps { 
                sh 'curl 192.168.0.190:80'
            }
        }
    }
}


//#! /bin/bash
//apt-cache policy docker | grep Installed

//#$1 - поданая на вход скрипта переменная
//I= apt-get -s $1 | grep "Status" ` #проверяем состояние пакета (apt-get) и ищем в выводе его статус (grep)

//I = apt-cache policy docker | grep Installed //#проверяем состояние пакета (apt-get) и ищем в выводе его статус (grep)
//if [ -n "$I" ] //#проверяем что нашли строку со статусом (что строка не пуста)
//then
//   echo $1" installed" //#выводим результат
//else
//   echo $1" not installed"
//fi